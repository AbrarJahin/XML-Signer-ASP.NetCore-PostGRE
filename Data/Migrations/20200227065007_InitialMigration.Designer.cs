// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using XmlSigner.Data;

namespace XmlSigner.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200227065007_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("XmlSigner.Data.Models.DownloadUploadToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CreateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("CreateTime")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("DbEntryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpirityTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("LastUpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SignReason")
                        .HasColumnType("text");

                    b.Property<long?>("SignerId")
                        .HasColumnName("SignerId")
                        .HasColumnType("bigint");

                    b.Property<int>("TableName")
                        .HasColumnType("integer");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UploadTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("XmlFileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SignerId");

                    b.HasIndex("XmlFileId");

                    b.ToTable("DownloadUploadToken");
                });

            modelBuilder.Entity("XmlSigner.Data.Models.LeaveApplication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AddressDuringLeave")
                        .IsRequired()
                        .HasColumnName("AddressDuringLeave")
                        .HasColumnType("character varying(32767)")
                        .HasMaxLength(32767);

                    b.Property<long>("ApplicantId")
                        .HasColumnName("ApplicantId")
                        .HasColumnType("bigint");

                    b.Property<int>("ApplicationStatus")
                        .HasColumnName("ApplicationStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("CreateTime")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnName("Designation")
                        .HasColumnType("character varying(32767)")
                        .HasMaxLength(32767);

                    b.Property<long?>("LastSignedId")
                        .HasColumnName("LastSignedId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastUpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("LastUpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LeaveEnd")
                        .HasColumnName("LeaveEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LeaveStart")
                        .HasColumnName("LeaveStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LeaveType")
                        .HasColumnName("LeaveType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("ApplicantName")
                        .HasColumnType("character varying(32767)")
                        .HasMaxLength(32767);

                    b.Property<string>("PhoneNoDuringLeave")
                        .IsRequired()
                        .HasColumnName("PhoneNoDuringLeave")
                        .HasColumnType("character varying(11)")
                        .HasMaxLength(11);

                    b.Property<string>("PurposeOfLeave")
                        .IsRequired()
                        .HasColumnName("PurposeOfLeave")
                        .HasColumnType("character varying(32767)")
                        .HasMaxLength(32767);

                    b.HasKey("Id");

                    b.ToTable("LeaveApplication");
                });

            modelBuilder.Entity("XmlSigner.Data.Models.XmlFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CreateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("CreateTime")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("DbEntryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileContent")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnName("FileContent")
                        .HasColumnType("text");

                    b.Property<string>("FileRealName")
                        .IsRequired()
                        .HasColumnName("FileRealName")
                        .HasColumnType("character varying(32767)")
                        .HasMaxLength(32767);

                    b.Property<bool>("IsAlreadyUsed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("LastUpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("PreviousFileId")
                        .HasColumnName("PreviousFileId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SignerId")
                        .HasColumnName("SignerId")
                        .HasColumnType("bigint");

                    b.Property<int>("TableName")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PreviousFileId");

                    b.HasIndex("SignerId");

                    b.ToTable("XmlFiles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<long>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<long>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<long>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<long>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("XmlSigner.Data.Models.DownloadUploadToken", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<long>", "Signer")
                        .WithMany()
                        .HasForeignKey("SignerId");

                    b.HasOne("XmlSigner.Data.Models.XmlFile", null)
                        .WithMany("DownloadUploadTokens")
                        .HasForeignKey("XmlFileId");
                });

            modelBuilder.Entity("XmlSigner.Data.Models.XmlFile", b =>
                {
                    b.HasOne("XmlSigner.Data.Models.XmlFile", "PreviousSignedFile")
                        .WithMany()
                        .HasForeignKey("PreviousFileId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<long>", "Signer")
                        .WithMany()
                        .HasForeignKey("SignerId");
                });
#pragma warning restore 612, 618
        }
    }
}
